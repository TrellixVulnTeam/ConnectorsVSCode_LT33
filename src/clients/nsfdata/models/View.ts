/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * Title of the view or folder.
     * @type {string}
     * @memberof View
     */
    title?: string;
    /**
     * `false` for a view, `true` for a folder. 
     * @type {boolean}
     * @memberof View
     */
    folder?: boolean;
    /**
     * `false` for shared, `true` for private. 
     * @type {boolean}
     * @memberof View
     */
    _private?: boolean;
    /**
     * Last modification date and time for the view or folder. 
     * @type {string}
     * @memberof View
     */
    modified?: string;
    /**
     * Universal ID of the view or folder.
     * @type {string}
     * @memberof View
     */
    unid?: string;
    /**
     * The URL of the corresponding view entry list resource.
     * @type {string}
     * @memberof View
     */
    href?: string;
}

export function ViewFromJSON(json: any): View {
    return ViewFromJSONTyped(json, false);
}

export function ViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): View {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, '@title') ? undefined : json['@title'],
        'folder': !exists(json, '@folder') ? undefined : json['@folder'],
        '_private': !exists(json, '@private') ? undefined : json['@private'],
        'modified': !exists(json, '@modified') ? undefined : json['@modified'],
        'unid': !exists(json, '@unid') ? undefined : json['@unid'],
        'href': !exists(json, '@href') ? undefined : json['@href'],
    };
}

export function ViewToJSON(value?: View | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@title': value.title,
        '@folder': value.folder,
        '@private': value._private,
        '@modified': value.modified,
        '@unid': value.unid,
        '@href': value.href,
    };
}


