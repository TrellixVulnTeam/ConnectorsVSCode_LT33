/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Link,
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
} from './';

/**
 * 
 * @export
 * @interface ViewEntry
 */
export interface ViewEntry {
    [key: string]: object | any;
    /**
     * Position of the entry in the view or folder and the universal ID of any associated document. 
     * @type {string}
     * @memberof ViewEntry
     */
    entryid?: string;
    /**
     * The note ID of the document associated with the entry, or an empty string if the entry is a category or total (systemcolumns bit 0x0001). 
     * @type {string}
     * @memberof ViewEntry
     */
    noteid?: string;
    /**
     * The universal ID of the document associated with the entry,  or an empty string if the entry is a category or total (systemcolumns bit 0x0002). 
     * @type {string}
     * @memberof ViewEntry
     */
    unid?: string;
    /**
     * Position of the entry in the view or folder (systemcolumns bit 0x0004). 
     * @type {string}
     * @memberof ViewEntry
     */
    position?: string;
    /**
     * `true` if the entry is marked read for the user (systemcolumns bit 0x0008). 
     * @type {boolean}
     * @memberof ViewEntry
     */
    read?: boolean;
    /**
     * The number of siblings of the entry (systemcolumns bit 0x0010). 
     * @type {number}
     * @memberof ViewEntry
     */
    siblings?: number;
    /**
     * The number of descendants of the entry (systemcolumns bit 0x0020). 
     * @type {number}
     * @memberof ViewEntry
     */
    descendants?: number;
    /**
     * The number of children of the entry (systemcolumns bit 0x0040). 
     * @type {number}
     * @memberof ViewEntry
     */
    children?: number;
    /**
     * The indent level of the entry (systemcolumns bit 0x0080). 
     * @type {number}
     * @memberof ViewEntry
     */
    indent?: number;
    /**
     * The form upon which the document is based (systemcolumns bit 0x0100). 
     * @type {string}
     * @memberof ViewEntry
     */
    form?: string;
    /**
     * `true` if the entry is a category (systemcolumns bit 0x0200). 
     * @type {boolean}
     * @memberof ViewEntry
     */
    category?: boolean;
    /**
     * `true` if the entry is a response (systemcolumns bit 0x0400). 
     * @type {boolean}
     * @memberof ViewEntry
     */
    response?: boolean;
    /**
     * URL for the entry (systemcolumns bit 0x0800). 
     * @type {string}
     * @memberof ViewEntry
     */
    href?: string;
    /**
     * 
     * @type {Link}
     * @memberof ViewEntry
     */
    link?: Link;
    /**
     * The search score if this entry is in a search response (systemcolumns bit 0x2000). 
     * @type {number}
     * @memberof ViewEntry
     */
    score?: number;
}

export function ViewEntryFromJSON(json: any): ViewEntry {
    return ViewEntryFromJSONTyped(json, false);
}

export function ViewEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ViewEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'entryid': !exists(json, '@entryid') ? undefined : json['@entryid'],
        'noteid': !exists(json, '@noteid') ? undefined : json['@noteid'],
        'unid': !exists(json, '@unid') ? undefined : json['@unid'],
        'position': !exists(json, '@position') ? undefined : json['@position'],
        'read': !exists(json, '@read') ? undefined : json['@read'],
        'siblings': !exists(json, '@siblings') ? undefined : json['@siblings'],
        'descendants': !exists(json, '@descendants') ? undefined : json['@descendants'],
        'children': !exists(json, '@children') ? undefined : json['@children'],
        'indent': !exists(json, '@indent') ? undefined : json['@indent'],
        'form': !exists(json, '@form') ? undefined : json['@form'],
        'category': !exists(json, '@category') ? undefined : json['@category'],
        'response': !exists(json, '@response') ? undefined : json['@response'],
        'href': !exists(json, '@href') ? undefined : json['@href'],
        'link': !exists(json, '@link') ? undefined : LinkFromJSON(json['@link']),
        'score': !exists(json, '@score') ? undefined : json['@score'],
    };
}

export function ViewEntryToJSON(value?: ViewEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        '@entryid': value.entryid,
        '@noteid': value.noteid,
        '@unid': value.unid,
        '@position': value.position,
        '@read': value.read,
        '@siblings': value.siblings,
        '@descendants': value.descendants,
        '@children': value.children,
        '@indent': value.indent,
        '@form': value.form,
        '@category': value.category,
        '@response': value.response,
        '@href': value.href,
        '@link': LinkToJSON(value.link),
        '@score': value.score,
    };
}


