/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    [key: string]: object | any;
    /**
     * The date the document was created.
     * @type {string}
     * @memberof Document
     */
    created?: string;
    /**
     * The last modification date of the document.
     * @type {string}
     * @memberof Document
     */
    modified?: string;
    /**
     * The universal ID of the document.
     * @type {string}
     * @memberof Document
     */
    unid?: string;
    /**
     * The note ID of the document.
     * @type {string}
     * @memberof Document
     */
    noteid?: string;
    /**
     * The URL of the Document resource.
     * @type {string}
     * @memberof Document
     */
    href?: string;
    /**
     * The name of the form used to create the document.
     * @type {string}
     * @memberof Document
     */
    form?: string;
}

export function DocumentFromJSON(json: any): Document {
    return DocumentFromJSONTyped(json, false);
}

export function DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Document {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'created': !exists(json, '@created') ? undefined : json['@created'],
        'modified': !exists(json, '@modified') ? undefined : json['@modified'],
        'unid': !exists(json, '@unid') ? undefined : json['@unid'],
        'noteid': !exists(json, '@noteid') ? undefined : json['@noteid'],
        'href': !exists(json, '@href') ? undefined : json['@href'],
        'form': !exists(json, '@form') ? undefined : json['@form'],
    };
}

export function DocumentToJSON(value?: Document | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        '@created': value.created,
        '@modified': value.modified,
        '@unid': value.unid,
        '@noteid': value.noteid,
        '@href': value.href,
        '@form': value.form,
    };
}


