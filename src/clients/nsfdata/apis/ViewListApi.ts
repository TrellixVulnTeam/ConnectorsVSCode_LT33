/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ViewListResponse,
    ViewListResponseFromJSON,
    ViewListResponseToJSON,
} from '../models';

export interface GetViewListRequest {
    folder: string;
    database: string;
}

/**
 * 
 */
export class ViewListApi extends runtime.BaseAPI {

    /**
     * Gets a list of views and folders in a database
     * Gets a list of views and folders in a database
     */
    async getViewListRaw(requestParameters: GetViewListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ViewListResponse>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getViewList.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getViewList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewListResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of views and folders in a database
     * Gets a list of views and folders in a database
     */
    async getViewList(requestParameters: GetViewListRequest, initOverrides?: RequestInit): Promise<ViewListResponse> {
        const response = await this.getViewListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
