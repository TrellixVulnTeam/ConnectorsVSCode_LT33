/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DocumentListResponse,
    DocumentListResponseFromJSON,
    DocumentListResponseToJSON,
} from '../models';

export interface GetDocumentsRequest {
    folder: string;
    database: string;
    search?: string;
    searchmaxdocs?: number;
    since?: string;
}

/**
 * 
 */
export class DocumentListApi extends runtime.BaseAPI {

    /**
     * If you don\'t specify any query parameters, the response includes all the documents in the database.To limit the number of documents returned, use the optional `since` or `search` parameters.
     * Gets a list of documents
     */
    async getDocumentsRaw(requestParameters: GetDocumentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DocumentListResponse>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getDocuments.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchmaxdocs !== undefined) {
            queryParameters['searchmaxdocs'] = requestParameters.searchmaxdocs;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/documents`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListResponseFromJSON(jsonValue));
    }

    /**
     * If you don\'t specify any query parameters, the response includes all the documents in the database.To limit the number of documents returned, use the optional `since` or `search` parameters.
     * Gets a list of documents
     */
    async getDocuments(requestParameters: GetDocumentsRequest, initOverrides?: RequestInit): Promise<DocumentListResponse> {
        const response = await this.getDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
