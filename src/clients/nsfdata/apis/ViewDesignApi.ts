/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ViewDesignResponse,
    ViewDesignResponseFromJSON,
    ViewDesignResponseToJSON,
} from '../models';

export interface GetViewDesignByNameRequest {
    folder: string;
    database: string;
    viewName: string;
}

export interface GetViewDesignByUnidRequest {
    folder: string;
    database: string;
    viewUnid: string;
}

/**
 * 
 */
export class ViewDesignApi extends runtime.BaseAPI {

    /**
     * Gets information on the columns in a view or folder
     * Gets information on the columns in a view or folder
     */
    async getViewDesignByNameRaw(requestParameters: GetViewDesignByNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ViewDesignResponse>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getViewDesignByName.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getViewDesignByName.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling getViewDesignByName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections/name/{viewName}/design`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewDesignResponseFromJSON(jsonValue));
    }

    /**
     * Gets information on the columns in a view or folder
     * Gets information on the columns in a view or folder
     */
    async getViewDesignByName(requestParameters: GetViewDesignByNameRequest, initOverrides?: RequestInit): Promise<ViewDesignResponse> {
        const response = await this.getViewDesignByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets information on the columns in a view or folder
     * Gets information on the columns in a view or folder
     */
    async getViewDesignByUnidRaw(requestParameters: GetViewDesignByUnidRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ViewDesignResponse>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getViewDesignByUnid.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getViewDesignByUnid.');
        }

        if (requestParameters.viewUnid === null || requestParameters.viewUnid === undefined) {
            throw new runtime.RequiredError('viewUnid','Required parameter requestParameters.viewUnid was null or undefined when calling getViewDesignByUnid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections/unid/{viewUnid}/design`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"viewUnid"}}`, encodeURIComponent(String(requestParameters.viewUnid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewDesignResponseFromJSON(jsonValue));
    }

    /**
     * Gets information on the columns in a view or folder
     * Gets information on the columns in a view or folder
     */
    async getViewDesignByUnid(requestParameters: GetViewDesignByUnidRequest, initOverrides?: RequestInit): Promise<ViewDesignResponse> {
        const response = await this.getViewDesignByUnidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
