/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FolderOperations,
    FolderOperationsFromJSON,
    FolderOperationsToJSON,
} from '../models';

export interface UpdateFolderContentByNameRequest {
    folder: string;
    database: string;
    viewName: string;
    operations: FolderOperations;
}

export interface UpdateFolderContentByUnidRequest {
    folder: string;
    database: string;
    viewUnid: string;
    operations: FolderOperations;
}

/**
 * 
 */
export class FolderApi extends runtime.BaseAPI {

    /**
     * Updates the contents of a folder by folder name
     * Updates the contents of a folder by folder name
     */
    async updateFolderContentByNameRaw(requestParameters: UpdateFolderContentByNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling updateFolderContentByName.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling updateFolderContentByName.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling updateFolderContentByName.');
        }

        if (requestParameters.operations === null || requestParameters.operations === undefined) {
            throw new runtime.RequiredError('operations','Required parameter requestParameters.operations was null or undefined when calling updateFolderContentByName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections/name/{viewName}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderOperationsToJSON(requestParameters.operations),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the contents of a folder by folder name
     * Updates the contents of a folder by folder name
     */
    async updateFolderContentByName(requestParameters: UpdateFolderContentByNameRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateFolderContentByNameRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the contents of a folder by folder UNID
     * Updates the contents of a folder by folder UNID
     */
    async updateFolderContentByUnidRaw(requestParameters: UpdateFolderContentByUnidRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling updateFolderContentByUnid.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling updateFolderContentByUnid.');
        }

        if (requestParameters.viewUnid === null || requestParameters.viewUnid === undefined) {
            throw new runtime.RequiredError('viewUnid','Required parameter requestParameters.viewUnid was null or undefined when calling updateFolderContentByUnid.');
        }

        if (requestParameters.operations === null || requestParameters.operations === undefined) {
            throw new runtime.RequiredError('operations','Required parameter requestParameters.operations was null or undefined when calling updateFolderContentByUnid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections/unid/{viewUnid}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"viewUnid"}}`, encodeURIComponent(String(requestParameters.viewUnid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderOperationsToJSON(requestParameters.operations),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the contents of a folder by folder UNID
     * Updates the contents of a folder by folder UNID
     */
    async updateFolderContentByUnid(requestParameters: UpdateFolderContentByUnidRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateFolderContentByUnidRaw(requestParameters, initOverrides);
    }

}
