/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface DeleteAttachmentRequest {
    folder: string;
    database: string;
    docUnid: string;
    itemName: string;
    fileName: string;
}

export interface GetAttachmentRequest {
    folder: string;
    database: string;
    docUnid: string;
    itemName: string;
    fileName: string;
}

/**
 * 
 */
export class AttachmentApi extends runtime.BaseAPI {

    /**
     * Deletes an attachment
     * Deletes an attachment
     */
    async deleteAttachmentRaw(requestParameters: DeleteAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling deleteAttachment.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling deleteAttachment.');
        }

        if (requestParameters.docUnid === null || requestParameters.docUnid === undefined) {
            throw new runtime.RequiredError('docUnid','Required parameter requestParameters.docUnid was null or undefined when calling deleteAttachment.');
        }

        if (requestParameters.itemName === null || requestParameters.itemName === undefined) {
            throw new runtime.RequiredError('itemName','Required parameter requestParameters.itemName was null or undefined when calling deleteAttachment.');
        }

        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError('fileName','Required parameter requestParameters.fileName was null or undefined when calling deleteAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/documents/unid/{docUnid}/{itemName}/{fileName}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"docUnid"}}`, encodeURIComponent(String(requestParameters.docUnid))).replace(`{${"itemName"}}`, encodeURIComponent(String(requestParameters.itemName))).replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters.fileName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an attachment
     * Deletes an attachment
     */
    async deleteAttachment(requestParameters: DeleteAttachmentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAttachmentRaw(requestParameters, initOverrides);
    }

    /**
     * Reads an attachment
     * Reads an attachment
     */
    async getAttachmentRaw(requestParameters: GetAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getAttachment.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getAttachment.');
        }

        if (requestParameters.docUnid === null || requestParameters.docUnid === undefined) {
            throw new runtime.RequiredError('docUnid','Required parameter requestParameters.docUnid was null or undefined when calling getAttachment.');
        }

        if (requestParameters.itemName === null || requestParameters.itemName === undefined) {
            throw new runtime.RequiredError('itemName','Required parameter requestParameters.itemName was null or undefined when calling getAttachment.');
        }

        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError('fileName','Required parameter requestParameters.fileName was null or undefined when calling getAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/documents/unid/{docUnid}/{itemName}/{fileName}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"docUnid"}}`, encodeURIComponent(String(requestParameters.docUnid))).replace(`{${"itemName"}}`, encodeURIComponent(String(requestParameters.itemName))).replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters.fileName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reads an attachment
     * Reads an attachment
     */
    async getAttachment(requestParameters: GetAttachmentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getAttachmentRaw(requestParameters, initOverrides);
    }

}
