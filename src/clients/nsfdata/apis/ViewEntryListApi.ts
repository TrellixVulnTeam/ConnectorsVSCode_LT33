/* tslint:disable */
/* eslint-disable */
/**
 * NSF Data
 * NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nsf.data@databoat.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ViewEntryListResponse,
    ViewEntryListResponseFromJSON,
    ViewEntryListResponseToJSON,
} from '../models';

export interface GetViewEntriesByNameRequest {
    folder: string;
    database: string;
    viewName: string;
    start?: number;
    count?: number;
    page?: number;
    ps?: number;
    entrycount?: boolean;
    search?: string;
    searchmaxdocs?: number;
    sortcolumn?: string;
    sortorder?: GetViewEntriesByNameSortorderEnum;
    startkeys?: string;
    keys?: string;
    keysexactmatch?: boolean;
    expandlevel?: number;
    category?: string;
    parentid?: string;
    systemcolumns?: number;
}

export interface GetViewEntriesByUnidRequest {
    folder: string;
    database: string;
    viewUnid: string;
    start?: number;
    count?: number;
    page?: number;
    ps?: number;
    entrycount?: boolean;
    search?: string;
    searchmaxdocs?: number;
    sortcolumn?: string;
    sortorder?: GetViewEntriesByUnidSortorderEnum;
    startkeys?: string;
    keys?: string;
    keysexactmatch?: boolean;
    expandlevel?: number;
    category?: string;
    parentid?: string;
    systemcolumns?: number;
}

/**
 * 
 */
export class ViewEntryListApi extends runtime.BaseAPI {

    /**
     * Gets a list of view entries by view name
     * Gets a list of view entries by view name
     */
    async getViewEntriesByNameRaw(requestParameters: GetViewEntriesByNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ViewEntryListResponse>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getViewEntriesByName.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getViewEntriesByName.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling getViewEntriesByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.ps !== undefined) {
            queryParameters['ps'] = requestParameters.ps;
        }

        if (requestParameters.entrycount !== undefined) {
            queryParameters['entrycount'] = requestParameters.entrycount;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchmaxdocs !== undefined) {
            queryParameters['searchmaxdocs'] = requestParameters.searchmaxdocs;
        }

        if (requestParameters.sortcolumn !== undefined) {
            queryParameters['sortcolumn'] = requestParameters.sortcolumn;
        }

        if (requestParameters.sortorder !== undefined) {
            queryParameters['sortorder'] = requestParameters.sortorder;
        }

        if (requestParameters.startkeys !== undefined) {
            queryParameters['startkeys'] = requestParameters.startkeys;
        }

        if (requestParameters.keys !== undefined) {
            queryParameters['keys'] = requestParameters.keys;
        }

        if (requestParameters.keysexactmatch !== undefined) {
            queryParameters['keysexactmatch'] = requestParameters.keysexactmatch;
        }

        if (requestParameters.expandlevel !== undefined) {
            queryParameters['expandlevel'] = requestParameters.expandlevel;
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.parentid !== undefined) {
            queryParameters['parentid'] = requestParameters.parentid;
        }

        if (requestParameters.systemcolumns !== undefined) {
            queryParameters['systemcolumns'] = requestParameters.systemcolumns;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections/name/{viewName}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewEntryListResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of view entries by view name
     * Gets a list of view entries by view name
     */
    async getViewEntriesByName(requestParameters: GetViewEntriesByNameRequest, initOverrides?: RequestInit): Promise<ViewEntryListResponse> {
        const response = await this.getViewEntriesByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of view entries by view UNID
     * Gets a list of view entries by view UNID
     */
    async getViewEntriesByUnidRaw(requestParameters: GetViewEntriesByUnidRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ViewEntryListResponse>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getViewEntriesByUnid.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling getViewEntriesByUnid.');
        }

        if (requestParameters.viewUnid === null || requestParameters.viewUnid === undefined) {
            throw new runtime.RequiredError('viewUnid','Required parameter requestParameters.viewUnid was null or undefined when calling getViewEntriesByUnid.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.ps !== undefined) {
            queryParameters['ps'] = requestParameters.ps;
        }

        if (requestParameters.entrycount !== undefined) {
            queryParameters['entrycount'] = requestParameters.entrycount;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchmaxdocs !== undefined) {
            queryParameters['searchmaxdocs'] = requestParameters.searchmaxdocs;
        }

        if (requestParameters.sortcolumn !== undefined) {
            queryParameters['sortcolumn'] = requestParameters.sortcolumn;
        }

        if (requestParameters.sortorder !== undefined) {
            queryParameters['sortorder'] = requestParameters.sortorder;
        }

        if (requestParameters.startkeys !== undefined) {
            queryParameters['startkeys'] = requestParameters.startkeys;
        }

        if (requestParameters.keys !== undefined) {
            queryParameters['keys'] = requestParameters.keys;
        }

        if (requestParameters.keysexactmatch !== undefined) {
            queryParameters['keysexactmatch'] = requestParameters.keysexactmatch;
        }

        if (requestParameters.expandlevel !== undefined) {
            queryParameters['expandlevel'] = requestParameters.expandlevel;
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.parentid !== undefined) {
            queryParameters['parentid'] = requestParameters.parentid;
        }

        if (requestParameters.systemcolumns !== undefined) {
            queryParameters['systemcolumns'] = requestParameters.systemcolumns;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{folder}/{database}/api/data/collections/unid/{viewUnid}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))).replace(`{${"database"}}`, encodeURIComponent(String(requestParameters.database))).replace(`{${"viewUnid"}}`, encodeURIComponent(String(requestParameters.viewUnid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewEntryListResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of view entries by view UNID
     * Gets a list of view entries by view UNID
     */
    async getViewEntriesByUnid(requestParameters: GetViewEntriesByUnidRequest, initOverrides?: RequestInit): Promise<ViewEntryListResponse> {
        const response = await this.getViewEntriesByUnidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetViewEntriesByNameSortorderEnum {
    Ascending = 'ascending',
    Descending = 'descending'
}
/**
    * @export
    * @enum {string}
    */
export enum GetViewEntriesByUnidSortorderEnum {
    Ascending = 'ascending',
    Descending = 'descending'
}
